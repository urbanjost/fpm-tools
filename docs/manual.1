." Text automatically generated by txt2man
.TH "untitled" "" "December 14, 2020" "" "" " "
." -----------------------------------------------------------------
." * set default formatting
." disable hyphenation
.nh
." disable justification (adjust text to left margin only)
.ad l
." -----------------------------------------------------------------
.SH NAME
\fBfpm\fP(1) - A Fortran package manager and build system

.SH SYNOPSIS
\fBfpm\fP \fISUBCOMMAND\fP [SUBCOMMAND_OPTIONS]
.PP
\fBfpm\fP \fB--help\fP|\fB--version\fP|\fB--list\fP
.fam T
.fi
.SH DESCRIPTION
\fBfpm\fP(1) is a package manager that helps you create Fortran projects
from source.
.PP
Most significantly \fBfpm\fP(1) lets you draw upon other \fBfpm\fP(1) packages
in distributed \fBgit\fP(1) repositories as if the packages were a basic
part of your default programming environment, as well as letting
you share your projects with others in a similar manner.
.PP
All output goes into the directory "build/" which can generally be
removed and rebuilt if required. Note that if external packages are
being used you need network connectivity to rebuild from scratch.
.SH SUBCOMMANDS
Valid \fBfpm\fP(1) subcommands are:
.IP \(bu 3
build Compile the packages into the "build/" directory.
.IP \(bu 3
new Create a new Fortran package directory with sample files.
.IP \(bu 3
update Update the project dependencies.
.IP \(bu 3
run Run the local package binaries. defaults to all binaries for
that release.
.IP \(bu 3
test Run the tests.
.IP \(bu 3
help Alternate method for displaying subcommand help.
.IP \(bu 3
list Display brief descriptions of all subcommands.
.PP
Their syntax is
.PP
.nf
.fam C
     build [--release] [--list] [--compiler COMPILER_NAME]
     new NAME [--lib|--src] [--app] [--test] [--example] [--backfill]
     update [NAME(s)] [--fetch-only] [--clean]
     run|test [[--target] NAME(s)] [--release] [--list]
              [--runner "CMD"] [--compiler COMPILER_NAME] [-- ARGS]
     help [NAME(s)]
     list [--list]

.fam T
.fi
.SH SUBCOMMAND OPTIONS
.TP
.B \fB--release\fP
Builds or runs in release mode (versus debug mode). \fBfpm\fP(1)
Defaults to using common compiler debug flags and building
in "build/*_debug/". When this flag is present build
output goes into "build/*_release/" and common compiler
optimization flags are used.
.TP
.B \fB--list\fP
List candidates instead of building or running them. On
the \fBfpm\fP(1) command this shows a brief list of subcommands.
.TP
.B \fB--runner\fP CMD
Provides a command to prefix program execution paths.
.TP
.B \fB--compiler\fP COMPILER_NAME
Compiler name. The environment variable
FPM_COMPILER sets the default.
.TP
.B -- ARGS
Arguments to pass to executables.
.SH VALID FOR ALL SUBCOMMANDS
.TP
.B \fB--help\fP
Show help text and exit
.TP
.B \fB--verbose\fP
Display additional information when available
.TP
.B \fB--version\fP
Show version information and exit.
.SH EXAMPLES
sample commands:
.PP
.nf
.fam C
    fpm new mypackage --app --test
    fpm build
    fpm test
    fpm run
    fpm new --help
    fpm run myprogram --release -- -x 10 -y 20 --title "my title"

.fam T
.fi
.SH SEE ALSO

.IP \(bu 3
The \fBfpm\fP(1) home page is at https://github.com/fortran-lang/\fBfpm\fP
.IP \(bu 3
Registered \fBfpm\fP(1) packages are at https://fortran-lang.org/packages
.IP \(bu 3
The \fBfpm\fP(1) TOML file format is described at
https://github.com/fortran-lang/\fBfpm\fP/blob/master/manifest-reference.md
.SH NAME
\fBnew\fP(1) - the \fBfpm\fP(1) subcommand to initialize a new project
.SH SYNOPSIS
\fBfpm\fP \fInew\fP \fINAME\fP [-\fB-lib\fP|\fB--src\fP] [-\fB-app\fP] [-\fB-test\fP] [-\fB-example\fP] [-\fB-backfill\fP]
.PP
\fBfpm\fP \fInew\fP \fB--help\fP|\fB--version\fP
.fam T
.fi
.SH DESCRIPTION
"\fBfpm\fP \fInew\fP" creates and populates a \fInew\fP programming project directory.
It
.RS
.IP \(bu 3
creates a directory with the specified name
.IP \(bu 3
runs the command "git init" in that directory
.IP \(bu 3
populates the directory with the default project directories
.IP \(bu 3
adds sample Fortran source files
.IP \(bu 3
adds a ".gitignore" file for ignoring the build/ directory
(where \fBfpm\fP-generated output will be placed)
.RE
.PP
The basic default file structure is
.PP
.nf
.fam C
     NAME/
       fpm.toml
       .gitignore
       src/
           NAME.f90
       app/
           main.f90
       test/
           main.f90
       example/
           main.f90

.fam T
.fi
Remember to update the information in the sample "fpm.toml"
file with your name and e-mail address.
.SH OPTIONS
.TP
.B \fINAME\fP
the name of the project directory to create. The name
must be a valid Fortran name composed of 1 to 63
ASCII alphanumeric characters and underscores,
starting with a letter.
.PP
The default is to create all of the src/, app/, example/ and test/
directories. If any of the following options are specified
then only selected subdirectories are generated:
.TP
.B \fB--lib\fP,\fB--src\fP
create directory src/ and a placeholder module
named "NAME.f90" for use with subcommand "build".
.TP
.B \fB--app\fP
create directory app/ and a placeholder main
program for use with subcommand "run".
.TP
.B \fB--test\fP
create directory test/ and a placeholder program
for use with the subcommand "test". Note that sans
"\fB--lib\fP" it really does not have anything to test.
.TP
.B \fB--example\fP
create directory example/ and a placeholder program
for use with the subcommand "run \fB--example\fP".
.PP
The default is equivalent to "\fBfpm\fP \fINAME\fP \fB--lib\fP \fB--app\fP \fB--test\fP \fB--example\fP".
.TP
.B \fB--backfill\fP
By default the directory must not exist. If this
option is present the directory may pre-exist and
only subdirectories and files that do not
already exist will be created. For example, if you
previously entered "\fBfpm\fP \fInew\fP myname \fB--lib\fP" entering
"\fBfpm\fP \fInew\fP myname \fB--backfill\fP" will create the missing
app/, example/ and test/ directories and programs.
.TP
.B \fB--help\fP
print this help and exit
.TP
.B \fB--version\fP
print program version information and exit
.SH EXAMPLES
Sample use
.PP
.nf
.fam C
   fpm new myproject  # create new project directory and seed it
   cd myproject       # Enter the new directory
   # and run commands such as
   fpm build
   fpm run            # run sample application program
   fpm run --example  # run sample example program
   fpm test           # run sample  test program

.fam T
.fi
.SH NAME
\fBbuild\fP(1) - the \fBfpm\fP(1) subcommand to build a project

.SH SYNOPSIS
\fBfpm\fP \fIbuild\fP [-\fB-release\fP][-\fB-compiler\fP \fICOMPILER_NAME\fP] [-list]
.PP
\fBfpm\fP \fIbuild\fP \fB--help\fP|\fB--version\fP
.fam T
.fi
.SH DESCRIPTION
The "\fBfpm\fP \fIbuild\fP" command
.RS
.IP \(bu 3
Fetches any dependencies
.IP \(bu 3
Scans your sources
.IP \(bu 3
Builds them in the proper order
.RE
.PP
The Fortran source files are assumed by default to be in
.RS
.IP \(bu 3
src/ for modules and procedure source
.IP \(bu 3
app/ main \fBprogram\fP(s) for applications
.IP \(bu 3
test/ main \fBprogram\fP(s) and support files for project tests
.IP \(bu 3
example/ example \fBprogram\fP(s) and support files for project demos
Changed or \fInew\fP files found are rebuilt. The results are placed in
the \fIbuild\fP/ directory.
.RE
.PP
Non-default pathnames and remote dependencies are used if
specified in the "fpm.toml" file.
.SH OPTIONS
.TP
.B \fB--release\fP
\fIbuild\fP in \fIbuild\fP/*_release instead of \fIbuild\fP/*_debug with
high optimization instead of full debug options.
.TP
.B \fB--compiler\fP \fICOMPILER_NAME\fP
Specify a compiler name. The default is
"gfortran" unless set by the environment
variable FPM_COMPILER.
.TP
.B \fB--list\fP
list candidates instead of building or running them
.TP
.B \fB--help\fP
print this help and exit
.TP
.B \fB--version\fP
print program version information and exit
.SH EXAMPLES
Sample commands:
.PP
.nf
.fam C
  fpm build           # build with debug options
  fpm build --release # build with high optimization

.fam T
.fi
.SH NAME
\fBrun\fP(1) - the \fBfpm\fP(1) subcommand to run project applications

.SH SYNOPSIS
\fBfpm\fP run [[-\fB-target\fP] \fINAME\fP(s)][-\fB-release\fP][-\fB-compiler\fP \fICOMPILER_NAME\fP]
[-\fB-runner\fP "CMD"] [-\fB-example\fP] [-\fB-list\fP][-- ARGS]
.PP
\fBfpm\fP run \fB--help\fP|\fB--version\fP
.fam T
.fi
.SH DESCRIPTION
Run applications you have built in your \fBfpm\fP(1) project.
By default applications specified in as "executable" in your package
manifest are used, alternatively also demonstration programs under
"example" can be used with this subcommand.
.SH OPTIONS
.TP
.B \fB--target\fP \fINAME\fP(s)
optional list of specific names to execute.
The default is to run all the applications in app/
or the programs listed in the "fpm.toml" file.
.TP
.B \fB--example\fP
run example programs instead of applications
.TP
.B \fB--release\fP
selects the optimized \fIbuild\fP instead of the debug
\fIbuild\fP.
.TP
.B \fB--compiler\fP \fICOMPILER_NAME\fP
Specify a compiler name. The default is
"gfortran" unless set by the environment
variable FPM_COMPILER.
.TP
.B \fB--runner\fP CMD
A command to prefix the program execution paths with.
see "\fBfpm\fP help runner" for further details.
.TP
.B \fB--list\fP
list candidates instead of building or running them
.TP
.B -- ARGS
optional arguments to pass to the \fBprogram\fP(s).
The same arguments are passed to all names
specified.
.SH EXAMPLES
\fBfpm\fP(1) "run" project applications
.PP
.nf
.fam C
  # run default programs in /app or as specified in "fpm.toml"
  fpm run

  # run default programs in /app or as specified in "fpm.toml"
  # using the compiler command "f90".
  fpm run --compiler f90

  # run example and demonstration programs instead of the default
  # application programs (specified in "fpm.toml")
  fpm run --example

  # run a specific program and pass arguments to the command
  fpm run mytest -- -x 10 -y 20 --title "my title line"

  # run production version of two applications
  fpm run --target prg1,prg2 --release

  # install executables in directory (assuming install(1) exists)
  fpm run --runner 'install -b -m 0711 -p -t /usr/local/bin'

.fam T
.fi
.SH NAME
\fBtest\fP(1) - the \fBfpm\fP(1) subcommand to run project tests

.SH SYNOPSIS
\fBfpm\fP test [[-\fB-target\fP] \fINAME\fP(s)][-\fB-release\fP][-\fB-compiler\fP \fICOMPILER_NAME\fP ]
[-\fB-runner\fP "CMD"] [-\fB-list\fP][-- ARGS]
.PP
\fBfpm\fP test \fB--help\fP|\fB--version\fP
.fam T
.fi
.SH DESCRIPTION
Run applications you have built to test your project.
.SH OPTIONS
.TP
.B \fB--target\fP \fINAME\fP(s)
optional list of specific test names to execute.
The default is to run all the tests in test/
or the tests listed in the "fpm.toml" file.
.TP
.B \fB--release\fP
selects the optimized \fIbuild\fP instead of the debug
\fIbuild\fP.
.TP
.B \fB--compiler\fP \fICOMPILER_NAME\fP
Specify a compiler name. The default is
"gfortran" unless set by the environment
variable FPM_COMPILER.
.TP
.B \fB--runner\fP CMD
A command to prefix the program execution paths with.
see "\fBfpm\fP help runner" for further details.
.TP
.B \fB--list\fP
list candidates instead of building or running them
.TP
.B -- ARGS
optional arguments to pass to the test \fBprogram\fP(s).
The same arguments are passed to all test names
specified.
.SH EXAMPLES
run tests
.PP
.nf
.fam C
 # run default tests in /test or as specified in "fpm.toml"
 fpm test

 # run using compiler command "f90"
 fpm test --compiler f90

 # run a specific test and pass arguments to the command
 fpm test mytest -- -x 10 -y 20 --title "my title line"

 fpm test tst1 tst2 --release # run production version of two tests

.fam T
.fi
.SH NAME
\fB--runner\fP(1) - a shared option for specifying an application to launch
executables.

.SH SYNOPSIS
\fBfpm\fP run|test \fB--runner\fP \fICMD\fP \.\.\. -- \fISUFFIX_OPTIONS\fP
.fam T
.fi
.SH DESCRIPTION
The \fB--runner\fP option allows specifying a program to launch
executables selected via the \fBfpm\fP(1) subcommands "run" and "test". This
gives easy recourse to utilities such as debuggers and other tools
that wrap other executables.
.PP
These external commands are not part of \fBfpm\fP(1) itself as they vary
from platform to platform or require independent installation.
.SH OPTION
.TP
.B \fB--runner\fP '\fICMD\fP'
quoted command used to launch the \fBfpm\fP(1) executables.
Available for both the "run" and "test" subcommands.
.TP
.B -- \fISUFFIX_OPTIONS\fP
additional options to suffix the command \fICMD\fP and executable
file names with.
.SH EXAMPLES
Use cases for '\fBfpm\fP run|test \fB--runner\fP "\fICMD\fP"' include employing
the following common GNU/Linux and Unix commands:
.SS INTERROGATE
.IP \(bu 3
nm - list symbols from object files
.IP \(bu 3
size - list section sizes and total size.
.IP \(bu 3
ldd - print shared object dependencies
.IP \(bu 3
ls - list directory contents
.IP \(bu 3
stat - display file or file system status
.IP \(bu 3
file - determine file type
.SS PERFORMANCE AND DEBUGGING
.IP \(bu 3
gdb - The GNU Debugger
.IP \(bu 3
valgrind - a suite of tools for debugging and profiling
.IP \(bu 3
time - time a simple command or give resource usage
.IP \(bu 3
timeout - run a command with a time limit
.SS COPY
.IP \(bu 3
install - copy files and set attributes
.IP \(bu 3
tar - an archiving utility
.SS ALTER
.IP \(bu 3
rm - remove files or directories
.IP \(bu 3
chmod - change permissions of a file
.IP \(bu 3
strip - remove unnecessary information from strippable files
.RE
.PP
For example
.PP
.nf
.fam C
  fpm test --runner gdb
  fpm run --runner "tar cvfz $HOME/bundle.tgz"
  fpm run --runner ldd
  fpm run --runner strip
  fpm run --runner 'cp -t /usr/local/bin'

  # options after executable name can be specified after the -- option
  fpm --runner cp run -- /usr/local/bin/
  # generates commands of the form "cp $FILENAME /usr/local/bin/"

  # bash(1) alias example:
  alias fpm-install=\\
  "fpm run --release --runner 'install -vbp -m 0711 -t ~/.local/bin'"
  fpm-install

.fam T
.fi
.SH NAME
\fBfpm-update\fP(1) - manage project dependencies

.SH SYNOPSIS
\fBfpm\fP update [-\fB-fetch-only\fP] [-\fB-clean\fP] [-\fB-verbose\fP] \fB[NAME\fP(\fIs\fP)]
.fam T
.fi
.SH DESCRIPTION
Manage and update project dependencies. If no dependency names are
provided all the dependencies are updated automatically.
.SH OPTIONS
.TP
.B \fB--fetch-only\fP
Only fetch dependencies, do not update existing projects
.TP
.B \fB--clean\fP
Do not use previous dependency cache
.TP
.B \fB--verbose\fP
Show additional printout
.SH SEE ALSO
The \fBfpm\fP(1) home page at https://github.com/fortran-lang/\fBfpm\fP
.SH NAME
\fBlist\fP(1) - list summary of \fBfpm\fP(1) subcommands

.SH SYNOPSIS
\fBfpm\fP \fIlist\fP [-\fIlist\fP]
.PP
\fBfpm\fP \fIlist\fP \fB--help\fP|\fB--version\fP
.fam T
.fi
.SH DESCRIPTION
Display a short description for each \fBfpm\fP(1) subcommand.
.SH OPTIONS
.TP
.B --\fIlist\fP
display a \fIlist\fP of command options as well. This is the
same output as generated by "\fBfpm\fP --\fIlist\fP".
.SH EXAMPLES
display a short \fIlist\fP of \fBfpm\fP(1) subcommands
.PP
.nf
.fam C
  fpm list
  fpm --list

.fam T
.fi
.SH NAME
\fBhelp\fP(1) - the \fBfpm\fP(1) subcommand to display help

.SH SYNOPSIS
\fIfpm\fP \fIhelp\fP [fpm] [new] [build] [run] [test] [help] [version] [manual]
[runner]
.fam T
.fi
.SH DESCRIPTION
The "\fIfpm\fP \fIhelp\fP" command is an alternative to the --\fIhelp\fP parameter
on the \fIfpm\fP(1) command and its subcommands.
.SH OPTIONS
.TP
.B \fINAME\fP(\fIs\fP)
A \fIlist\fP of topic names to display. All the subcommands
have their own page (\fInew\fP, \fIbuild\fP, \fIrun\fP, \fItest\fP, \.\.\.).
.RS
.PP
The special name "\fImanual\fP" displays all the \fIfpm\fP(1)
built-in documentation.
.PP
The default is to display \fIhelp\fP for the \fIfpm\fP(1) command
itself.
.SH EXAMPLES
Sample usage:
.PP
.nf
.fam C
     fpm help           # general fpm(1) command help
     fpm help version   # show program version
     fpm help new       # display help for "new" subcommand
     fpm help manual    # All fpm(1) built-in documentation


.fam T
.fi
.RE
.TP
.B Version:
0.1.2, alpha
.RS
.TP
.B Program:
\fIfpm\fP(1)
Description: A Fortran package manager and \fIbuild\fP system
.TP
.B Home Page:
https://github.com/fortran-lang/\fIfpm\fP
.TP
.B License:
MIT
.TP
.B OS Type:
Linux
